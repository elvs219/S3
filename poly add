
#include<stdio.h>
#include<stdlib.h>

struct term
	{
	int coef;
	int exp;
	struct term *addr;
	};

struct term *createterm(int coef,int exp;);
struct term *createpoly(int n);
void traversal(struct term *head);
struct term *addpoly(struct term *h1,struct term *h2);


void main()
	{
	int m,n;
	struct term *h1=NULL,*h2=NULL,*Res;
	printf("enter the number of terms of 1st polynomial: ");
	scanf("%d",&m);
	printf("enter the number of terms of 2nd polynomial: ");
	scanf("%d",&n);
	h1=createpoly(m);
	h2=createpoly(n);
	printf("\n1st polynomial: ");
	traversal(h1);
	printf("\n2nd polynomial: ");
	traversal(h2);
	Res=addpoly(h1,h2);
	printf("\nRESULT: \n");
	traversal(Res);
	}


struct term *createterm(int coef,int exp)
	
	{

	struct term *p;
	p=(struct term *)malloc(sizeof(struct term ));
	p->coef=coef;
	p->exp=exp;
	p->addr=NULL;
	return p;

	}

struct term *createpoly(int n)

	{

	int c,e,i;
	struct term *head=NULL, *nt, *last;
	for(i=0;i<n;i++)
		{
	        printf("\nenter the coeff & expo of %dth term: ",i+1);
		scanf("%d",&c);
		scanf("%d",&e);
		nt=createterm(c,e);
		if(head==NULL)
			{
			head=last=nt;
			}
		else
			{
			last->addr=nt;
			last=nt;
			}
		}
	return head;
	}


void traversal(struct term *head)
	{
	struct term *p;
	p=head;
	while(p!=NULL)
		{
		printf("%dx%d + ",p->coef,p->exp);
		p=p->addr;
		}
	}

struct term *addpoly(struct term *h1,struct term *h2)
	{
	struct term *Rh=NULL, *p1, *p2, *n, *last;
	p1=h1;
	p2=h2;
	while(p1!=NULL && p2!=NULL)
		{
		if(p1->exp > p2->exp)
			{
			n=createterm(p1->coef,p1->exp);
			p1=p1->addr;
			}
		else if(p1->exp < p2->exp)
			{
			n=createterm(p2->coef,p2->exp);
			p2=p2->addr;
			}
		else
			{
			n=createterm(p1->coef+p2->coef,p1->exp);
			p1=p1->addr;
			p2=p2->addr;
			}
		if(Rh==NULL)
			{
			Rh=last=n;
			}
		else
			{
			last->addr=n;
			last=n;
			}
		}
	while(p1!=NULL)
		{
		n=createterm(p1->coef,p1->exp);
		p1=p1->addr;
		if(Rh==NULL)
			{
			Rh=last=n;
			}
		else
			{
			last->addr=n;
			last=n;
			}
		}
	while(p2!=NULL)
		{
		n=createterm(p2->coef,p2->exp);
		p2=p2->addr;
		if(Rh==NULL)
			{
			Rh=last=n;
			}
		else
			{
			last->addr=n;
			last=n;
			}
		}
	return Rh;
	}
